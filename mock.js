/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "https://api.team3132.com";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(faker.lorem.slug(1))]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/status`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          isAuthenticated: faker.datatype.boolean(),
          roles: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => faker.lorem.slug(1)),
          isAdmin: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/discord`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/discord/callback`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/auth/logout`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/me`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/user/me`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/me`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/me/avatar`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(faker.lorem.slug(1))]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/me/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/me/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/me/regenerateToken`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
      [ctx.status(201), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            firstName: faker.name.findName(),
            lastName: faker.name.findName(),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
            discordRefreshToken: faker.lorem.slug(1),
            calendarSecret: faker.lorem.slug(1),
            email: faker.internet.email(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/user/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/user/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/user/:id/regenerateToken`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          firstName: faker.name.findName(),
          lastName: faker.name.findName(),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          discordRefreshToken: faker.lorem.slug(1),
          calendarSecret: faker.lorem.slug(1),
          email: faker.internet.email(),
        }),
      ],
      [ctx.status(201), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/:id/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/:id/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/user/:id/avatar`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(faker.lorem.slug(1))]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
      [ctx.status(201), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/attendance/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/attendance/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/attendance/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
      [ctx.status(201), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/rsvp/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/rsvp/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/rsvp/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            description: faker.lorem.slug(1),
            title: faker.lorem.slug(1),
            startDate: faker.date.past(),
            endDate: faker.date.past(),
            allDay: faker.datatype.boolean(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/event`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          title: faker.lorem.slug(1),
          startDate: faker.date.past(),
          endDate: faker.date.past(),
          allDay: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(201), ctx.json(null)],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          title: faker.lorem.slug(1),
          startDate: faker.date.past(),
          endDate: faker.date.past(),
          allDay: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/event/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          title: faker.lorem.slug(1),
          startDate: faker.date.past(),
          endDate: faker.date.past(),
          allDay: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/event/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          description: faker.lorem.slug(1),
          title: faker.lorem.slug(1),
          startDate: faker.date.past(),
          endDate: faker.date.past(),
          allDay: faker.datatype.boolean(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event/:eventId/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/event/:eventId/rsvp`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/event/rsvps`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event/:eventId/rsvps`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["YES", "NO", "MAYBE"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event/:eventId/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/event/:eventId/attendance`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/event/:eventId/attendances`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: faker.lorem.slug(1),
            eventId: faker.lorem.slug(1),
            userId: faker.lorem.slug(1),
            status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/event/:eventId/scanin`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.lorem.slug(1),
          eventId: faker.lorem.slug(1),
          userId: faker.lorem.slug(1),
          status: faker.helpers.arrayElement(["ATTENDED", "NOT_ATTENDED"]),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/scancode`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          code: faker.lorem.slug(1),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          userId: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/scancode`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            code: faker.lorem.slug(1),
            createdAt: faker.date.past(),
            updatedAt: faker.date.past(),
            userId: faker.lorem.slug(1),
          }))
        ),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/scancode/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          code: faker.lorem.slug(1),
          createdAt: faker.date.past(),
          updatedAt: faker.date.past(),
          userId: faker.lorem.slug(1),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/calendar`, (req, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(null)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  if (typeof window === "undefined") {
    const { setupServer } = require("msw/node");
    const server = setupServer(...handlers);
    server.listen();
  } else {
    const worker = setupWorker(...handlers);
    worker.start();
  }
};
