name: Release
on:
  workflow_dispatch:

permissions:
  contents: read # for checkout

jobs:
  check:
    uses: ./.github/workflows/job-check.yml
    name: Check
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      packages: write
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      major: ${{ steps.semantic.outputs.new_release_major_version }}
      minor: ${{ steps.semantic.outputs.new_release_minor_version }}
      patch: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to step summary
        run: |
          echo "### Release" >> $GITHUB_STEP_SUMMARY
          echo "Published: ${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Major: ${{ steps.semantic.outputs.new_release_major_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Minor: ${{ steps.semantic.outputs.new_release_minor_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Patch: ${{ steps.semantic.outputs.new_release_patch_version }}" >> $GITHUB_STEP_SUMMARY
  # sentry-backend:
  #   if: needs.release.outputs.published == 'true'
  #   name: Sentry Backend
  #   runs-on: ubuntu-latest
  #   needs: [release, build-backend]
  #   env:
  #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #     SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  #     SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Restore Dist
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: backend-build
  #         path: dist
  #     - uses: getsentry/action-release@v1
  #       with:
  #         environment: 'production'
  #         sourcemaps: './dist'
  #         version: ${{ needs.release.outputs.version }}
  docker-build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: ['release']
    if: needs.release.outputs.published == 'true'
    name: 'Build and Publish Image'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/team3132/attendancesystem
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.major }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.${{ needs.release.outputs.patch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/team3132/attendancesystem:latest

      - name: Extract Backend Dist
        uses: docker/build-push-action@v5
        id: docker_build_dist
        with:
          push: false
          target: back-out
          outputs: type=local,dest=dist
      
      - name: Upload Sentry Source Maps
        uses: getsentry/action-release@v1
        with:
          environment: 'production'
          sourcemaps: './dist'
          version: ${{ needs.release.outputs.version }}
