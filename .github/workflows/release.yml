name: Release
on:
  workflow_dispatch:

permissions:
  contents: read # for checkout

jobs:
  check:
    uses: ./.github/workflows/job-check.yml
    name: Check
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      packages: write
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      major: ${{ steps.semantic.outputs.new_release_major_version }}
      minor: ${{ steps.semantic.outputs.new_release_minor_version }}
      patch: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to step summary
        run: |
          echo "### Release" >> $GITHUB_STEP_SUMMARY
          echo "Published: ${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Major: ${{ steps.semantic.outputs.new_release_major_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Minor: ${{ steps.semantic.outputs.new_release_minor_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Patch: ${{ steps.semantic.outputs.new_release_patch_version }}" >> $GITHUB_STEP_SUMMARY
  publish-tauri:
    if: needs.release.outputs.published == 'true'
    needs: ["release"]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        name: Install PNPM
        with:
          version: 8
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: "pnpm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        if: matrix.platform != 'windows-latest'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./packages/frontend/src-tauri -> target"
          cache-on-failure: true
          prefix-key: ${{ runner.os }}-tauri

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libglib2.0-dev libgtk2.0-dev	libjavascriptcoregtk-4.1-dev libsoup-3.0-dev libwebkit2gtk-4.1-dev
      - name: Install Dependancies
        run: pnpm install --frozen-lockfile
      - name: Edit Toml
        uses: sebasptsch/json-edit-action@v1.3.1
        with:
          path: ./packages/frontend/src-tauri/tauri.conf.json
          key: version
          value: ${{ needs.release.outputs.version }}
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: ./packages/frontend
          tagName: v${{ needs.release.outputs.version }}
          releaseName: v${{ needs.release.outputs.version }}
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
  docker-build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: ["release"]
    if: needs.release.outputs.published == 'true'
    name: "Build and Publish Image"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta (Bot)
        id: meta_bot
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/team3132/attendancesystem-bot
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.major }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.${{ needs.release.outputs.patch }}
      - name: Docker meta (Backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/team3132/attendancesystem-backend
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.major }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.${{ needs.release.outputs.patch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (Backend)
        uses: docker/build-push-action@v6
        id: docker_build_backend
        with:
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          push: true
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/team3132/attendancesystem-backend:latest
          target: backend-runner

      - name: Build and push (Bot)
        uses: docker/build-push-action@v6
        id: docker_build_bot
        with:
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          tags: ${{ steps.meta_bot.outputs.tags }}
          push: true
          labels: ${{ steps.meta_bot.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/team3132/attendancesystem-bot:latest
          target: bot-runner

      - name: Extract Backend Dist (Backend)
        uses: docker/build-push-action@v6
        id: docker_build_dist_backend
        with:
          push: false
          target: backend-out
          outputs: type=local,dest=dist/backend

      - name: Extract Backend Dist (Bot)
        uses: docker/build-push-action@v6
        id: docker_build_dist_bot
        with:
          push: false
          target: bot-out
          outputs: type=local,dest=dist/bot

      - name: Upload Backend Dist
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: dist/backend

      - name: Upload Bot Dist
        uses: actions/upload-artifact@v4
        with:
          name: bot-dist
          path: dist/bot
