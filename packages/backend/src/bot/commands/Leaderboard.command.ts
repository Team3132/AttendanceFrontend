import { Injectable, Logger, UseInterceptors } from '@nestjs/common';
import { SlashCommand, Context, SlashCommandContext } from 'necord';

import { EventAutocompleteInterceptor } from '../interceptors/event.interceptor';
import { DateTime } from 'luxon';
import { OutreachService } from '@/outreach/outreach.service';
import { LeaderboardDto } from '@/outreach/dto/LeaderboardDto';

const leaderboardLine = (data: LeaderboardDto) =>
  `${data.rank}. **${data.username}** - ${Number(data.outreachHours)} hours`;

@Injectable()
export class LeaderBoardCommand {
  constructor(private readonly outreachService: OutreachService) {}

  private readonly logger = new Logger(LeaderBoardCommand.name);

  @UseInterceptors(EventAutocompleteInterceptor)
  @SlashCommand({
    name: 'leaderboard',
    description: 'Get the leaderboard for outreach hours',
    guilds: [process.env['GUILD_ID']],
  })
  public async onLeaderboard(@Context() [interaction]: SlashCommandContext) {
    const currentLeaderboard =
      await this.outreachService.getOutreachLeaderBoard();

    const headerLine = `# Outreach Leaderboard`;

    const contentLines = currentLeaderboard.map(leaderboardLine).join('\n');

    const footerLine = `### Generated by ${interaction.user.toString()} at ${DateTime.local().toLocaleString(
      DateTime.DATETIME_MED,
    )}`;

    const joined = [headerLine, contentLines, footerLine].join('\n');

    return interaction.reply({
      content: joined,
    });
  }
}
